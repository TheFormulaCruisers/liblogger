
liblogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef5  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9f  00000000  00000000  00001209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000408  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000021b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006b  00000000  00000000  0000287e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000028e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a2 32       	cpi	r26, 0x22	; 34
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	51 d0       	rcall	.+162    	; 0x154 <main>
  b2:	94 c0       	rjmp	.+296    	; 0x1dc <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <logger_init>:

static volatile buffer_t buffer;

// --------------------------------------------------------- External Functions

void *logger_init(void) {
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;

	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
		buffer.buffer1[i] = UINT16_MAX;
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	5f ef       	ldi	r21, 0xFF	; 255
  be:	9c 01       	movw	r18, r24
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	f9 01       	movw	r30, r18
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e0 50       	subi	r30, 0x00	; 0
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	51 83       	std	Z+1, r21	; 0x01
  d0:	40 83       	st	Z, r20
		buffer.buffer2[i] = UINT16_MAX;
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	fc 01       	movw	r30, r24
  d8:	ee 5e       	subi	r30, 0xEE	; 238
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	51 83       	std	Z+1, r21	; 0x01
  de:	40 83       	st	Z, r20
  e0:	c9 01       	movw	r24, r18
// --------------------------------------------------------- External Functions

void *logger_init(void) {
	uint8_t i;

	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
  e2:	28 30       	cpi	r18, 0x08	; 8
  e4:	31 05       	cpc	r19, r1
  e6:	59 f7       	brne	.-42     	; 0xbe <logger_init+0x8>
		buffer.buffer1[i] = UINT16_MAX;
		buffer.buffer2[i] = UINT16_MAX;
	}
	
	buffer.writable = (void *)buffer.buffer1;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	return (void *)buffer.buffer2;
}
  f4:	82 e1       	ldi	r24, 0x12	; 18
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	08 95       	ret

000000fa <logger_log>:

void logger_log(logger_log_t type, uint16_t value) {
	const uint8_t sreg_msk = SREG & 0x80;
  fa:	2f b7       	in	r18, 0x3f	; 63
  fc:	20 78       	andi	r18, 0x80	; 128

	SREG ^= sreg_msk;
  fe:	9f b7       	in	r25, 0x3f	; 63
 100:	92 27       	eor	r25, r18
 102:	9f bf       	out	0x3f, r25	; 63
	*(buffer.writable+type) = value;
 104:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	e8 0f       	add	r30, r24
 114:	f9 1f       	adc	r31, r25
 116:	71 83       	std	Z+1, r23	; 0x01
 118:	60 83       	st	Z, r22
	SREG |= sreg_msk;
 11a:	8f b7       	in	r24, 0x3f	; 63
 11c:	28 2b       	or	r18, r24
 11e:	2f bf       	out	0x3f, r18	; 63
 120:	08 95       	ret

00000122 <logger_rotate>:
}

void *logger_rotate(void) {

	if (buffer.writable == buffer.buffer1) {
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	82 50       	subi	r24, 0x02	; 2
 12c:	91 40       	sbci	r25, 0x01	; 1
 12e:	49 f4       	brne	.+18     	; 0x142 <logger_rotate+0x20>
		buffer.writable = (void *)buffer.buffer2;
 130:	82 e1       	ldi	r24, 0x12	; 18
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return (void *)buffer.buffer1;
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	08 95       	ret
	} else {
		buffer.writable = (void *)buffer.buffer1;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return (void *)buffer.buffer2;
 14e:	82 e1       	ldi	r24, 0x12	; 18
 150:	91 e0       	ldi	r25, 0x01	; 1
	}
 152:	08 95       	ret

00000154 <main>:
#include <logger.h>

int main(void) {

	uint16_t *log_buffer;
	sei();
 154:	78 94       	sei

	log_buffer = logger_init();
 156:	af df       	rcall	.-162    	; 0xb6 <logger_init>

	logger_log(LOGGER_LOG_SYSTEM, 1);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	cd df       	rcall	.-102    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_THROTTLE, 2);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	c9 df       	rcall	.-110    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_BRAKE, 4);
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	c5 df       	rcall	.-118    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_WHEEL1, 8);
 170:	68 e0       	ldi	r22, 0x08	; 8
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	c1 df       	rcall	.-126    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_WHEEL2, 16);
 178:	60 e1       	ldi	r22, 0x10	; 16
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	bd df       	rcall	.-134    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_MOTOR_TEMP, 32);
 180:	60 e2       	ldi	r22, 0x20	; 32
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	b9 df       	rcall	.-142    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_FLUID_FLOW, 64);
 188:	60 e4       	ldi	r22, 0x40	; 64
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	86 e0       	ldi	r24, 0x06	; 6
	logger_log(LOGGER_LOG_FLUID_TEMP, 128);
 18e:	b5 df       	rcall	.-150    	; 0xfa <logger_log>
 190:	60 e8       	ldi	r22, 0x80	; 128
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	87 e0       	ldi	r24, 0x07	; 7

	log_buffer = logger_rotate();
 196:	b1 df       	rcall	.-158    	; 0xfa <logger_log>
 198:	c4 df       	rcall	.-120    	; 0x122 <logger_rotate>

	logger_log(LOGGER_LOG_SYSTEM, 256);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	71 e0       	ldi	r23, 0x01	; 1
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	ac df       	rcall	.-168    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_THROTTLE, 512);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	72 e0       	ldi	r23, 0x02	; 2
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	a8 df       	rcall	.-176    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_BRAKE, 1024);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	74 e0       	ldi	r23, 0x04	; 4
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	a4 df       	rcall	.-184    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_WHEEL1, 2048);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	78 e0       	ldi	r23, 0x08	; 8
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	a0 df       	rcall	.-192    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_WHEEL2, 4096);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	70 e1       	ldi	r23, 0x10	; 16
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	9c df       	rcall	.-200    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_MOTOR_TEMP, 8192);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e2       	ldi	r23, 0x20	; 32
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	98 df       	rcall	.-208    	; 0xfa <logger_log>
 1ca:	60 e0       	ldi	r22, 0x00	; 0
	logger_log(LOGGER_LOG_FLUID_FLOW, 16384);
 1cc:	70 e4       	ldi	r23, 0x40	; 64
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	94 df       	rcall	.-216    	; 0xfa <logger_log>
 1d2:	6f ef       	ldi	r22, 0xFF	; 255
 1d4:	7f e7       	ldi	r23, 0x7F	; 127
	logger_log(LOGGER_LOG_FLUID_TEMP, 32767);
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	90 df       	rcall	.-224    	; 0xfa <logger_log>
 1da:	ff cf       	rjmp	.-2      	; 0x1da <main+0x86>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
