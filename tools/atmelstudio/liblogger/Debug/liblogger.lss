
liblogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee1  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b89  00000000  00000000  000011e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003df  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064c  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000058  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a2 32       	cpi	r26, 0x22	; 34
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	49 d0       	rcall	.+146    	; 0x144 <main>
  b2:	8b c0       	rjmp	.+278    	; 0x1ca <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <logger_init>:

static volatile buffer_t buffer;

// --------------------------------------------------------- External Functions

void *logger_init(void) {
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0

	uint8_t i;

	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
		buffer.buffer1[i] = UINT16_MAX;
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	5f ef       	ldi	r21, 0xFF	; 255
  be:	9c 01       	movw	r18, r24
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	f9 01       	movw	r30, r18
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e0 50       	subi	r30, 0x00	; 0
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	51 83       	std	Z+1, r21	; 0x01
  d0:	40 83       	st	Z, r20
		buffer.buffer2[i] = UINT16_MAX;
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	fc 01       	movw	r30, r24
  d8:	ee 5e       	subi	r30, 0xEE	; 238
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	51 83       	std	Z+1, r21	; 0x01
  de:	40 83       	st	Z, r20
  e0:	c9 01       	movw	r24, r18

void *logger_init(void) {

	uint8_t i;

	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
  e2:	28 30       	cpi	r18, 0x08	; 8
  e4:	31 05       	cpc	r19, r1
  e6:	59 f7       	brne	.-42     	; 0xbe <logger_init+0x8>
		buffer.buffer1[i] = UINT16_MAX;
		buffer.buffer2[i] = UINT16_MAX;
	}
	
	buffer.writable = (void *)buffer.buffer1;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	return (void *)buffer.buffer2;
}
  f4:	82 e1       	ldi	r24, 0x12	; 18
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	08 95       	ret

000000fa <logger_log>:

void logger_log(logger_log_t type, uint16_t value) {

	*(buffer.writable+type) = value;
  fa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	71 83       	std	Z+1, r23	; 0x01
 10e:	60 83       	st	Z, r22
 110:	08 95       	ret

00000112 <logger_rotate>:
}

void *logger_rotate(void) {

	if (buffer.writable == buffer.buffer1) {
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	82 50       	subi	r24, 0x02	; 2
 11c:	91 40       	sbci	r25, 0x01	; 1
 11e:	49 f4       	brne	.+18     	; 0x132 <logger_rotate+0x20>
		buffer.writable = (void *)buffer.buffer2;
 120:	82 e1       	ldi	r24, 0x12	; 18
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return (void *)buffer.buffer1;
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	08 95       	ret
	} else {
		buffer.writable = (void *)buffer.buffer1;
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return (void *)buffer.buffer2;
 13e:	82 e1       	ldi	r24, 0x12	; 18
 140:	91 e0       	ldi	r25, 0x01	; 1
	}
 142:	08 95       	ret

00000144 <main>:

int main(void) {

	uint16_t *log_buffer;

	log_buffer = logger_init();
 144:	b8 df       	rcall	.-144    	; 0xb6 <logger_init>

	logger_log(LOGGER_LOG_SYSTEM, 1);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	d6 df       	rcall	.-84     	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_THROTTLE, 2);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	d2 df       	rcall	.-92     	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_BRAKE, 4);
 156:	64 e0       	ldi	r22, 0x04	; 4
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	ce df       	rcall	.-100    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_WHEEL1, 8);
 15e:	68 e0       	ldi	r22, 0x08	; 8
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	ca df       	rcall	.-108    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_WHEEL2, 16);
 166:	60 e1       	ldi	r22, 0x10	; 16
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	c6 df       	rcall	.-116    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_MOTOR_TEMP, 32);
 16e:	60 e2       	ldi	r22, 0x20	; 32
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	c2 df       	rcall	.-124    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_FLUID_FLOW, 64);
 176:	60 e4       	ldi	r22, 0x40	; 64
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	86 e0       	ldi	r24, 0x06	; 6
	logger_log(LOGGER_LOG_FLUID_TEMP, 128);
 17c:	be df       	rcall	.-132    	; 0xfa <logger_log>
 17e:	60 e8       	ldi	r22, 0x80	; 128
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	87 e0       	ldi	r24, 0x07	; 7

	log_buffer = logger_rotate();
 184:	ba df       	rcall	.-140    	; 0xfa <logger_log>
 186:	c5 df       	rcall	.-118    	; 0x112 <logger_rotate>

	logger_log(LOGGER_LOG_SYSTEM, 256);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	71 e0       	ldi	r23, 0x01	; 1
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	b5 df       	rcall	.-150    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_THROTTLE, 512);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	72 e0       	ldi	r23, 0x02	; 2
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	b1 df       	rcall	.-158    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_BRAKE, 1024);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	74 e0       	ldi	r23, 0x04	; 4
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	ad df       	rcall	.-166    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_WHEEL1, 2048);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	78 e0       	ldi	r23, 0x08	; 8
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	a9 df       	rcall	.-174    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_WHEEL2, 4096);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	70 e1       	ldi	r23, 0x10	; 16
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	a5 df       	rcall	.-182    	; 0xfa <logger_log>
	logger_log(LOGGER_LOG_MOTOR_TEMP, 8192);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e2       	ldi	r23, 0x20	; 32
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	a1 df       	rcall	.-190    	; 0xfa <logger_log>
 1b8:	60 e0       	ldi	r22, 0x00	; 0
	logger_log(LOGGER_LOG_FLUID_FLOW, 16384);
 1ba:	70 e4       	ldi	r23, 0x40	; 64
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	9d df       	rcall	.-198    	; 0xfa <logger_log>
 1c0:	6f ef       	ldi	r22, 0xFF	; 255
 1c2:	7f e7       	ldi	r23, 0x7F	; 127
	logger_log(LOGGER_LOG_FLUID_TEMP, 32767);
 1c4:	87 e0       	ldi	r24, 0x07	; 7
 1c6:	99 df       	rcall	.-206    	; 0xfa <logger_log>
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0x84>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
